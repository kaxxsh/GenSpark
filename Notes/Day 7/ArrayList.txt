
using RequestTrakerModelLibrary;
using System.Collections;

namespace RequestTrackerApp
{
    internal class Program
    {
        void UnderstaingList()
        {
            ArrayList list = new ArrayList();
            list.Add(100);
            list.Add("Hello");
            list.Add(23.4);
            list.Add(90.3f);
            list.Add(new Employee(101, "Ramu", new DateTime(), "Admin"));
            for (int i = 0; i < list.Count; i++)
            {
                Console.WriteLine(list[i]);
            }
        }
        static void Main(string[] args)
        {
           new Program().UnderstaingList();
                
        }
    }
}


using RequestTrakerModelLibrary;
using System.Collections;
using System.Globalization;

namespace RequestTrackerApp
{
    internal class Program
    {
        void UnderstaingList()
        {
            ArrayList list = new ArrayList();
            list.Add(100);
            list.Add("Hello");
            list.Add(23.4);
            list.Add(90.3f);
            double total = 0;
            list.Add(new Employee(101, "Ramu", new DateTime(), "Admin"));
            for (int i = 0; i < list.Count; i++)
            {
                Console.WriteLine(list[i]);
                total = Convert.ToDouble(list[i]);
            }
        }
        void UnderstandingGenericList()
        {
            List<int> numbers = new List<int>();
            numbers.Add(100);
            numbers.Add(79);
            numbers.Add(55);
            double total = 0;
            //for (int i = 0;i < numbers.Count;i++)
            //{
            //    Console.WriteLine(numbers[i]);
            //    total += numbers[i];
            //}
            foreach (int i in numbers)
            {
                Console.WriteLine(i);
                total += i;
            }
            Console.WriteLine($"Total is {total}");
        }
      
      void UnderstandingSet()
{
    HashSet<string> names = new HashSet<string>()
    {
        "Ramu","Bimu"
    };
    names.Add("Somu");
    names.Add("Komu");
    names.Add("Timu");
    names.Add("Ramu");
    foreach (string name in names)
    {
        Console.WriteLine(name);
    }
}
      
      
      using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RequestTrakerModelLibrary
{
    public class Department
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Department_Head { get; set; }
        public override bool Equals(object? obj)
        {
            return this.Id.Equals((obj as Department).Id);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RequestTrakerModelLibrary
{
    public class Request : IEquatable<Request>
    {
        public int Id { get; set; }
        public string RequestText { get; set; }
        public int Raised_By { get; set; }
        public string Status { get; set; }
        public int Closed_By { get; set; }
        public DateTime RaisedDate { get; set; } = DateTime.Now;
        public DateTime ClosedDate { get; set; }

        public bool Equals(Request? other)
        {
            return Id.Equals(other.Id);
        }
        //public bool Equals(Request? other) => Id.Equals(other.Id);
    }
}
namespace RequestTrakerModelLibrary
{
    public class Employee 
    {
        public Department EmployeeDepartment { get; set; }
        int age;
        DateTime dob;
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Age
        {
            get
            {
                return age;
            }
        }
        public DateTime DateOfBirth
        {
            get => dob;
            set
            {
                dob = value;
                age = ((DateTime.Today - dob).Days) / 365;
            }
        }
        public double Salary { get; set; }
        public string Type { get; set; }
        public string Role { get; set; }

        public Employee()
        {
            Id = 0;
            Name = string.Empty;
            Salary = 0.0;
            DateOfBirth = new DateTime();
            Type = string.Empty;
            Role = "Employee";
        }
        public Employee(int id, string name, DateTime dateOfBirth,string role)
        {
            Id = id;
            Name = name;
            DateOfBirth = dateOfBirth;
            Role = role;
        }

        public virtual void BuildEmployeeFromConsole()
        {
            Console.WriteLine("Please enter the Name");
            Name = Console.ReadLine() ?? String.Empty;
            Console.WriteLine("Please enter the Date of birth");
            DateOfBirth = Convert.ToDateTime(Console.ReadLine());
            Role = "Employee";
        }


        public override string ToString()
        {
            return "Employee Type : " + Type
                + "\nEmployee Id : " + Id
                + "\nEmployee Name " + Name
                + "\nDate of birth : " + DateOfBirth
                + "\nEmployee Age : " + Age
                +"\nEmployee Role "+Role;
        }
        public override bool Equals(object? obj)
        {
            Employee e1, e2;
            e1 = this;
            //e2 = (Employee)obj;//Casting
            e2 = obj as Employee;//Casting in a more symanctic way
            return e1.Id.Equals(e2.Id);
        }
        public static bool operator==(Employee a, Employee b)
        {
            return a.Id == b.Id;

        }
        public static bool operator !=(Employee a, Employee b)
        {
            return a.Id != b.Id;
        }
    }
}

using RequestTrakerModelLibrary;
using System.Collections;
using System.Globalization;

namespace RequestTrackerApp
{
    internal class Program
    {
        void UnderstaingList()
        {
            ArrayList list = new ArrayList();
            list.Add(100);
            list.Add("Hello");
            list.Add(23.4);
            list.Add(90.3f);
            double total = 0;
            list.Add(new Employee(101, "Ramu", new DateTime(), "Admin"));
            for (int i = 0; i < list.Count; i++)
            {
                Console.WriteLine(list[i]);
                total = Convert.ToDouble(list[i]);
            }
        }
        void UnderstandingGenericList()
        {
            List<int> numbers = new List<int>();
            numbers.Add(100);
            numbers.Add(79);
            numbers.Add(55);
            numbers.Add(79);
            double total = 0;
            //for (int i = 0;i < numbers.Count;i++)
            //{
            //    Console.WriteLine(numbers[i]);
            //    total += numbers[i];
            //}
            foreach (int i in numbers)
            {
                Console.WriteLine(i);
                total += i;
            }
            Console.WriteLine($"Total is {total}");
        }
        void UnderstandingSet()
        {
            HashSet<string> names = new HashSet<string>()
            {
                "Ramu","Bimu"
            };
            names.Add("Somu");
            names.Add("Komu");
            names.Add("Timu");
            names.Add("Ramu");
            foreach (string name in names)
            {
                Console.WriteLine(name);
            }
        }
        void UnderstandingDictionary()
        {
            Dictionary<int,string> employees = new Dictionary<int,string>();
            employees.Add(101, "Ramu");
            employees.Add(102, "Komu");
            employees.Add(103, "Bimu");
            employees.Add(104, "Ramu");
            foreach (var key in employees.Keys)
            {
                Console.WriteLine(key+" "+employees[key]);
            }
            if(employees.ContainsKey(101))
                Console.WriteLine("employee 101 present and name is " + employees[101]);
            if(employees.ContainsValue("Somu"))
                Console.WriteLine("there is an emploeye with name Somu in teh collection");
        }
        static void Main(string[] args)
        {
           new Program().UnderstandingDictionary();
                
        }
    }
}

        static void Main(string[] args)
        {
           new Program().UnderstandingGenericList();
                
        }
    }
}
